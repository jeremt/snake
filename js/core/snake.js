// Generated by CoffeeScript 1.3.3
(function() {

  define(["kevent"], function(KEvent) {
    var Snake;
    return Snake = (function() {
      var _body, _len;

      _len = 5;

      _body = new Array(_len);

      Snake.prototype.direction = 'right';

      function Snake(map, color, x, y) {
        this.map = map;
        this.color = color;
        this.key = new KEvent;
        this.create(x, y);
        this.draw();
      }

      Snake.prototype.create = function(x, y) {
        var i, _results;
        i = 0;
        _results = [];
        while (i < _len) {
          _results.push(_body[i++] = {
            x: x - i,
            y: y
          });
        }
        return _results;
      };

      Snake.prototype.draw = function() {
        var alpha, node, _i, _len1, _results;
        this.map.clear();
        alpha = 1;
        _results = [];
        for (_i = 0, _len1 = _body.length; _i < _len1; _i++) {
          node = _body[_i];
          this.map.drawCell(node.x, node.y, this.color, alpha);
          if (alpha > 0.4) {
            _results.push(alpha -= 0.1);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Snake.prototype.move = function(dir) {
        var tail, x, y;
        switch (dir) {
          case 'up':
            y = _body[0].y - 1;
            y = y < 0 ? this.map.height : y;
            tail = {
              x: _body[0].x,
              y: y
            };
            break;
          case 'down':
            tail = {
              x: _body[0].x,
              y: (_body[0].y + 1) % this.map.height
            };
            break;
          case 'right':
            tail = {
              x: (_body[0].x + 1) % this.map.width,
              y: _body[0].y
            };
            break;
          case 'left':
            x = _body[0].x - 1;
            x = x < 0 ? this.map.width : x;
            tail = {
              x: x,
              y: _body[0].y
            };
        }
        _body.unshift(tail);
        return this.draw();
      };

      Snake.prototype.eat = function(food) {
        if (!(_body[0].x === food.x && _body[0].y === food.y)) {
          _body.pop();
          return false;
        }
        return true;
      };

      Snake.prototype.hit = function() {
        var head, node, _i, _len1;
        head = true;
        for (_i = 0, _len1 = _body.length; _i < _len1; _i++) {
          node = _body[_i];
          if (!head && node.x === _body[0].x && node.y === _body[0].y) {
            return true;
          }
          head = false;
        }
        return false;
      };

      Snake.prototype.update = function() {
        if (this.key.pressed("up") && this.direction !== "down") {
          return this.direction = "up";
        } else if (this.key.pressed("down") && this.direction !== "up") {
          return this.direction = 'down';
        } else if (this.key.pressed("left") && this.direction !== "right") {
          return this.direction = 'left';
        } else if (this.key.pressed("right") && this.direction !== "left") {
          return this.direction = 'right';
        }
      };

      return Snake;

    })();
  });

}).call(this);
